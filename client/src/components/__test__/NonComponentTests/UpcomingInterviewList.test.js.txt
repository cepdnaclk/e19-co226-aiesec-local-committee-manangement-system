import React from 'react';
import { render, waitFor, screen } from '@testing-library/react';
import UpcomingInterviewList from '../UpcomingInterviewList';
import { UserContext } from '../../context/UserContext';

// Mock the useContext hook
jest.mock('./../../../context/UserContext');

describe('UpcomingInterviewList', () => {
	it('renders loading skeleton when isLoading is true', () => {
		// Mock useContext to provide a loading state
		UserContext.mockReturnValue({
			token: 'your-token',
			user: { id: 'your-user-id' },
		});

		render(<UpcomingInterviewList />);

		// Use screen queries to assert the presence of Skeleton components
		expect(screen.getByText('You Have')).toBeInTheDocument();
		expect(screen.getByText('Upcoming Interviews')).toBeInTheDocument();
		expect(screen.getByText('Loading...')).toBeInTheDocument();
	});

	it('renders interview list when isLoading is false', async () => {
		// Mock useContext to provide a token and user id
		UserContext.mockReturnValue({
			token: 'your-token',
			user: { id: 'your-user-id' },
		});

		// Mock the axios.get function to return sample data
		const sampleInterviews = [
			{
				id: 1,
				epName: 'Interview 1',
				interviewDate: '2023-09-19',
				interviewTime: '09:00 AM',
			},
			{
				id: 2,
				epName: 'Interview 2',
				interviewDate: '2023-09-20',
				interviewTime: '10:00 AM',
			},
		];

		jest.spyOn(require('./../api/axios'), 'default').mockResolvedValue({
			data: sampleInterviews,
		});

		render(<UpcomingInterviewList />);

		// Wait for the component to finish rendering with data
		await waitFor(() => {
			// Use screen queries to assert the presence of interview list items
			expect(screen.getByText('You Have')).toBeInTheDocument();
			expect(screen.getByText('Upcoming Interviews')).toBeInTheDocument();
			expect(
				screen.getByText('Interview 1 on 2023-09-19 at 09:00 AM')
			).toBeInTheDocument();
			expect(
				screen.getByText('Interview 2 on 2023-09-20 at 10:00 AM')
			).toBeInTheDocument();
		});
	});
});
